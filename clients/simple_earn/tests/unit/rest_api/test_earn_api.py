"""
Binance Simple Earn REST API

OpenAPI Specification for the Binance Simple Earn REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_simple_earn.rest_api.api import EarnApi
from binance_sdk_simple_earn.rest_api.models import (
    GetFlexibleSubscriptionPreviewResponse,
)
from binance_sdk_simple_earn.rest_api.models import GetLockedSubscriptionPreviewResponse
from binance_sdk_simple_earn.rest_api.models import RedeemFlexibleProductResponse
from binance_sdk_simple_earn.rest_api.models import RedeemLockedProductResponse
from binance_sdk_simple_earn.rest_api.models import SetFlexibleAutoSubscribeResponse
from binance_sdk_simple_earn.rest_api.models import SetLockedAutoSubscribeResponse
from binance_sdk_simple_earn.rest_api.models import SetLockedProductRedeemOptionResponse
from binance_sdk_simple_earn.rest_api.models import SubscribeFlexibleProductResponse
from binance_sdk_simple_earn.rest_api.models import SubscribeLockedProductResponse


class TestEarnApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = EarnApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_subscription_preview_success(self, mock_get_signature):
        """Test get_flexible_subscription_preview() successfully with required parameters only."""

        params = {
            "product_id": "1",
            "amount": 1.0,
        }

        expected_response = {
            "totalAmount": "1232.32230982",
            "rewardAsset": "BUSD",
            "airDropAsset": "BETH",
            "estDailyBonusRewards": "0.22759183",
            "estDailyRealTimeRewards": "0.22759183",
            "estDailyAirdropRewards": "0.22759183",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_subscription_preview(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/subscriptionPreview" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["productId"] == "1"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleSubscriptionPreviewResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleSubscriptionPreviewResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFlexibleSubscriptionPreviewResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_subscription_preview_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_flexible_subscription_preview() successfully with optional parameters."""

        params = {"product_id": "1", "amount": 1.0, "recv_window": 5000}

        expected_response = {
            "totalAmount": "1232.32230982",
            "rewardAsset": "BUSD",
            "airDropAsset": "BETH",
            "estDailyBonusRewards": "0.22759183",
            "estDailyRealTimeRewards": "0.22759183",
            "estDailyAirdropRewards": "0.22759183",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_subscription_preview(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/subscriptionPreview" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleSubscriptionPreviewResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleSubscriptionPreviewResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFlexibleSubscriptionPreviewResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_flexible_subscription_preview_missing_required_param_product_id(self):
        """Test that get_flexible_subscription_preview() raises RequiredError when 'product_id' is missing."""
        params = {
            "product_id": "1",
            "amount": 1.0,
        }
        del params["product_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'product_id'"
        ):
            self.client.get_flexible_subscription_preview(**params)

    def test_get_flexible_subscription_preview_missing_required_param_amount(self):
        """Test that get_flexible_subscription_preview() raises RequiredError when 'amount' is missing."""
        params = {
            "product_id": "1",
            "amount": 1.0,
        }
        del params["amount"]

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.get_flexible_subscription_preview(**params)

    def test_get_flexible_subscription_preview_server_error(self):
        """Test that get_flexible_subscription_preview() raises an error when the server returns an error."""

        params = {
            "product_id": "1",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.get_flexible_subscription_preview = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_flexible_subscription_preview(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_locked_subscription_preview_success(self, mock_get_signature):
        """Test get_locked_subscription_preview() successfully with required parameters only."""

        params = {
            "project_id": "1",
            "amount": 1.0,
        }

        expected_response = [
            {
                "rewardAsset": "AXS",
                "totalRewardAmt": "5.17181528",
                "extraRewardAsset": "BNB",
                "estTotalExtraRewardAmt": "5.17181528",
                "boostRewardAsset": "AXS",
                "estDailyRewardAmt": "1.20928901",
                "nextPay": "1.29295383",
                "nextPayDate": "1646697600000",
                "valueDate": "1646697600000",
                "rewardsEndDate": "1651449600000",
                "deliverDate": "1651536000000",
                "nextSubscriptionDate": "1651536000000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_subscription_preview(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/locked/subscriptionPreview" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["projectId"] == "1"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedSubscriptionPreviewResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedSubscriptionPreviewResponse.from_dict(expected_response)
        else:
            expected = GetLockedSubscriptionPreviewResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_locked_subscription_preview_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_locked_subscription_preview() successfully with optional parameters."""

        params = {
            "project_id": "1",
            "amount": 1.0,
            "auto_subscribe": True,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "rewardAsset": "AXS",
                "totalRewardAmt": "5.17181528",
                "extraRewardAsset": "BNB",
                "estTotalExtraRewardAmt": "5.17181528",
                "boostRewardAsset": "AXS",
                "estDailyRewardAmt": "1.20928901",
                "nextPay": "1.29295383",
                "nextPayDate": "1646697600000",
                "valueDate": "1646697600000",
                "rewardsEndDate": "1651449600000",
                "deliverDate": "1651536000000",
                "nextSubscriptionDate": "1651536000000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_subscription_preview(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/locked/subscriptionPreview" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedSubscriptionPreviewResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedSubscriptionPreviewResponse.from_dict(expected_response)
        else:
            expected = GetLockedSubscriptionPreviewResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_locked_subscription_preview_missing_required_param_project_id(self):
        """Test that get_locked_subscription_preview() raises RequiredError when 'project_id' is missing."""
        params = {
            "project_id": "1",
            "amount": 1.0,
        }
        del params["project_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'project_id'"
        ):
            self.client.get_locked_subscription_preview(**params)

    def test_get_locked_subscription_preview_missing_required_param_amount(self):
        """Test that get_locked_subscription_preview() raises RequiredError when 'amount' is missing."""
        params = {
            "project_id": "1",
            "amount": 1.0,
        }
        del params["amount"]

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.get_locked_subscription_preview(**params)

    def test_get_locked_subscription_preview_server_error(self):
        """Test that get_locked_subscription_preview() raises an error when the server returns an error."""

        params = {
            "project_id": "1",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.get_locked_subscription_preview = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_locked_subscription_preview(**params)

    @patch("binance_common.utils.get_signature")
    def test_redeem_flexible_product_success(self, mock_get_signature):
        """Test redeem_flexible_product() successfully with required parameters only."""

        params = {
            "product_id": "1",
        }

        expected_response = {"redeemId": 40607, "success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.redeem_flexible_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/redeem" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["productId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RedeemFlexibleProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = RedeemFlexibleProductResponse.from_dict(expected_response)
        else:
            expected = RedeemFlexibleProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_redeem_flexible_product_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test redeem_flexible_product() successfully with optional parameters."""

        params = {
            "product_id": "1",
            "redeem_all": False,
            "amount": 1.0,
            "dest_account": "SPOT",
            "recv_window": 5000,
        }

        expected_response = {"redeemId": 40607, "success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.redeem_flexible_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/redeem" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RedeemFlexibleProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = RedeemFlexibleProductResponse.from_dict(expected_response)
        else:
            expected = RedeemFlexibleProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_redeem_flexible_product_missing_required_param_product_id(self):
        """Test that redeem_flexible_product() raises RequiredError when 'product_id' is missing."""
        params = {
            "product_id": "1",
        }
        del params["product_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'product_id'"
        ):
            self.client.redeem_flexible_product(**params)

    def test_redeem_flexible_product_server_error(self):
        """Test that redeem_flexible_product() raises an error when the server returns an error."""

        params = {
            "product_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.redeem_flexible_product = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.redeem_flexible_product(**params)

    @patch("binance_common.utils.get_signature")
    def test_redeem_locked_product_success(self, mock_get_signature):
        """Test redeem_locked_product() successfully with required parameters only."""

        params = {
            "position_id": "1",
        }

        expected_response = {"redeemId": 40607, "success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.redeem_locked_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/redeem" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["positionId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RedeemLockedProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = RedeemLockedProductResponse.from_dict(expected_response)
        else:
            expected = RedeemLockedProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_redeem_locked_product_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test redeem_locked_product() successfully with optional parameters."""

        params = {"position_id": "1", "recv_window": 5000}

        expected_response = {"redeemId": 40607, "success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.redeem_locked_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/redeem" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RedeemLockedProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = RedeemLockedProductResponse.from_dict(expected_response)
        else:
            expected = RedeemLockedProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_redeem_locked_product_missing_required_param_position_id(self):
        """Test that redeem_locked_product() raises RequiredError when 'position_id' is missing."""
        params = {
            "position_id": "1",
        }
        del params["position_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'position_id'"
        ):
            self.client.redeem_locked_product(**params)

    def test_redeem_locked_product_server_error(self):
        """Test that redeem_locked_product() raises an error when the server returns an error."""

        params = {
            "position_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.redeem_locked_product = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.redeem_locked_product(**params)

    @patch("binance_common.utils.get_signature")
    def test_set_flexible_auto_subscribe_success(self, mock_get_signature):
        """Test set_flexible_auto_subscribe() successfully with required parameters only."""

        params = {
            "product_id": "1",
            "auto_subscribe": True,
        }

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_flexible_auto_subscribe(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/setAutoSubscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["productId"] == "1"
        assert normalized["autoSubscribe"] is True

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetFlexibleAutoSubscribeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SetFlexibleAutoSubscribeResponse.from_dict(expected_response)
        else:
            expected = SetFlexibleAutoSubscribeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_set_flexible_auto_subscribe_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test set_flexible_auto_subscribe() successfully with optional parameters."""

        params = {"product_id": "1", "auto_subscribe": True, "recv_window": 5000}

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_flexible_auto_subscribe(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/setAutoSubscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetFlexibleAutoSubscribeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SetFlexibleAutoSubscribeResponse.from_dict(expected_response)
        else:
            expected = SetFlexibleAutoSubscribeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_set_flexible_auto_subscribe_missing_required_param_product_id(self):
        """Test that set_flexible_auto_subscribe() raises RequiredError when 'product_id' is missing."""
        params = {
            "product_id": "1",
            "auto_subscribe": True,
        }
        del params["product_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'product_id'"
        ):
            self.client.set_flexible_auto_subscribe(**params)

    def test_set_flexible_auto_subscribe_missing_required_param_auto_subscribe(self):
        """Test that set_flexible_auto_subscribe() raises RequiredError when 'auto_subscribe' is missing."""
        params = {
            "product_id": "1",
            "auto_subscribe": True,
        }
        del params["auto_subscribe"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'auto_subscribe'"
        ):
            self.client.set_flexible_auto_subscribe(**params)

    def test_set_flexible_auto_subscribe_server_error(self):
        """Test that set_flexible_auto_subscribe() raises an error when the server returns an error."""

        params = {
            "product_id": "1",
            "auto_subscribe": True,
        }

        mock_error = Exception("ResponseError")
        self.client.set_flexible_auto_subscribe = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.set_flexible_auto_subscribe(**params)

    @patch("binance_common.utils.get_signature")
    def test_set_locked_auto_subscribe_success(self, mock_get_signature):
        """Test set_locked_auto_subscribe() successfully with required parameters only."""

        params = {
            "position_id": "1",
            "auto_subscribe": True,
        }

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_locked_auto_subscribe(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/setAutoSubscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["positionId"] == "1"
        assert normalized["autoSubscribe"] is True

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetLockedAutoSubscribeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SetLockedAutoSubscribeResponse.from_dict(expected_response)
        else:
            expected = SetLockedAutoSubscribeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_set_locked_auto_subscribe_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test set_locked_auto_subscribe() successfully with optional parameters."""

        params = {"position_id": "1", "auto_subscribe": True, "recv_window": 5000}

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_locked_auto_subscribe(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/setAutoSubscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetLockedAutoSubscribeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SetLockedAutoSubscribeResponse.from_dict(expected_response)
        else:
            expected = SetLockedAutoSubscribeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_set_locked_auto_subscribe_missing_required_param_position_id(self):
        """Test that set_locked_auto_subscribe() raises RequiredError when 'position_id' is missing."""
        params = {
            "position_id": "1",
            "auto_subscribe": True,
        }
        del params["position_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'position_id'"
        ):
            self.client.set_locked_auto_subscribe(**params)

    def test_set_locked_auto_subscribe_missing_required_param_auto_subscribe(self):
        """Test that set_locked_auto_subscribe() raises RequiredError when 'auto_subscribe' is missing."""
        params = {
            "position_id": "1",
            "auto_subscribe": True,
        }
        del params["auto_subscribe"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'auto_subscribe'"
        ):
            self.client.set_locked_auto_subscribe(**params)

    def test_set_locked_auto_subscribe_server_error(self):
        """Test that set_locked_auto_subscribe() raises an error when the server returns an error."""

        params = {
            "position_id": "1",
            "auto_subscribe": True,
        }

        mock_error = Exception("ResponseError")
        self.client.set_locked_auto_subscribe = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.set_locked_auto_subscribe(**params)

    @patch("binance_common.utils.get_signature")
    def test_set_locked_product_redeem_option_success(self, mock_get_signature):
        """Test set_locked_product_redeem_option() successfully with required parameters only."""

        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
        }

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_locked_product_redeem_option(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/setRedeemOption" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["positionId"] == "1"
        assert normalized["redeemTo"] == "redeem_to_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetLockedProductRedeemOptionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SetLockedProductRedeemOptionResponse.from_dict(expected_response)
        else:
            expected = SetLockedProductRedeemOptionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_set_locked_product_redeem_option_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test set_locked_product_redeem_option() successfully with optional parameters."""

        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
            "recv_window": 5000,
        }

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_locked_product_redeem_option(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/setRedeemOption" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetLockedProductRedeemOptionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SetLockedProductRedeemOptionResponse.from_dict(expected_response)
        else:
            expected = SetLockedProductRedeemOptionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_set_locked_product_redeem_option_missing_required_param_position_id(self):
        """Test that set_locked_product_redeem_option() raises RequiredError when 'position_id' is missing."""
        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
        }
        del params["position_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'position_id'"
        ):
            self.client.set_locked_product_redeem_option(**params)

    def test_set_locked_product_redeem_option_missing_required_param_redeem_to(self):
        """Test that set_locked_product_redeem_option() raises RequiredError when 'redeem_to' is missing."""
        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
        }
        del params["redeem_to"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'redeem_to'"
        ):
            self.client.set_locked_product_redeem_option(**params)

    def test_set_locked_product_redeem_option_server_error(self):
        """Test that set_locked_product_redeem_option() raises an error when the server returns an error."""

        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
        }

        mock_error = Exception("ResponseError")
        self.client.set_locked_product_redeem_option = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.set_locked_product_redeem_option(**params)

    @patch("binance_common.utils.get_signature")
    def test_subscribe_flexible_product_success(self, mock_get_signature):
        """Test subscribe_flexible_product() successfully with required parameters only."""

        params = {
            "product_id": "1",
            "amount": 1.0,
        }

        expected_response = {"purchaseId": 40607, "success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.subscribe_flexible_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/subscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["productId"] == "1"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SubscribeFlexibleProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SubscribeFlexibleProductResponse.from_dict(expected_response)
        else:
            expected = SubscribeFlexibleProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_subscribe_flexible_product_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test subscribe_flexible_product() successfully with optional parameters."""

        params = {
            "product_id": "1",
            "amount": 1.0,
            "auto_subscribe": True,
            "source_account": "SPOT",
            "recv_window": 5000,
        }

        expected_response = {"purchaseId": 40607, "success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.subscribe_flexible_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/subscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SubscribeFlexibleProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SubscribeFlexibleProductResponse.from_dict(expected_response)
        else:
            expected = SubscribeFlexibleProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_subscribe_flexible_product_missing_required_param_product_id(self):
        """Test that subscribe_flexible_product() raises RequiredError when 'product_id' is missing."""
        params = {
            "product_id": "1",
            "amount": 1.0,
        }
        del params["product_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'product_id'"
        ):
            self.client.subscribe_flexible_product(**params)

    def test_subscribe_flexible_product_missing_required_param_amount(self):
        """Test that subscribe_flexible_product() raises RequiredError when 'amount' is missing."""
        params = {
            "product_id": "1",
            "amount": 1.0,
        }
        del params["amount"]

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.subscribe_flexible_product(**params)

    def test_subscribe_flexible_product_server_error(self):
        """Test that subscribe_flexible_product() raises an error when the server returns an error."""

        params = {
            "product_id": "1",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.subscribe_flexible_product = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.subscribe_flexible_product(**params)

    @patch("binance_common.utils.get_signature")
    def test_subscribe_locked_product_success(self, mock_get_signature):
        """Test subscribe_locked_product() successfully with required parameters only."""

        params = {
            "project_id": "1",
            "amount": 1.0,
        }

        expected_response = {
            "purchaseId": 40607,
            "positionId": "12345",
            "success": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.subscribe_locked_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/subscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["projectId"] == "1"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SubscribeLockedProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SubscribeLockedProductResponse.from_dict(expected_response)
        else:
            expected = SubscribeLockedProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_subscribe_locked_product_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test subscribe_locked_product() successfully with optional parameters."""

        params = {
            "project_id": "1",
            "amount": 1.0,
            "auto_subscribe": True,
            "source_account": "SPOT",
            "redeem_to": "",
            "recv_window": 5000,
        }

        expected_response = {
            "purchaseId": 40607,
            "positionId": "12345",
            "success": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.subscribe_locked_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/subscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SubscribeLockedProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SubscribeLockedProductResponse.from_dict(expected_response)
        else:
            expected = SubscribeLockedProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_subscribe_locked_product_missing_required_param_project_id(self):
        """Test that subscribe_locked_product() raises RequiredError when 'project_id' is missing."""
        params = {
            "project_id": "1",
            "amount": 1.0,
        }
        del params["project_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'project_id'"
        ):
            self.client.subscribe_locked_product(**params)

    def test_subscribe_locked_product_missing_required_param_amount(self):
        """Test that subscribe_locked_product() raises RequiredError when 'amount' is missing."""
        params = {
            "project_id": "1",
            "amount": 1.0,
        }
        del params["amount"]

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.subscribe_locked_product(**params)

    def test_subscribe_locked_product_server_error(self):
        """Test that subscribe_locked_product() raises an error when the server returns an error."""

        params = {
            "project_id": "1",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.subscribe_locked_product = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.subscribe_locked_product(**params)
