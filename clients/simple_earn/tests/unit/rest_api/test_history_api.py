"""
Binance Simple Earn REST API

OpenAPI Specification for the Binance Simple Earn REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_simple_earn.rest_api.api import HistoryApi
from binance_sdk_simple_earn.rest_api.models import GetCollateralRecordResponse
from binance_sdk_simple_earn.rest_api.models import GetFlexibleRedemptionRecordResponse
from binance_sdk_simple_earn.rest_api.models import GetFlexibleRewardsHistoryResponse
from binance_sdk_simple_earn.rest_api.models import (
    GetFlexibleSubscriptionRecordResponse,
)
from binance_sdk_simple_earn.rest_api.models import GetLockedRedemptionRecordResponse
from binance_sdk_simple_earn.rest_api.models import GetLockedRewardsHistoryResponse
from binance_sdk_simple_earn.rest_api.models import GetLockedSubscriptionRecordResponse
from binance_sdk_simple_earn.rest_api.models import GetRateHistoryResponse


class TestHistoryApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = HistoryApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_get_collateral_record_success(self, mock_get_signature):
        """Test get_collateral_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "amount": "100.00000000",
                    "productId": "BUSD001",
                    "asset": "USDT",
                    "createTime": 1575018510000,
                    "type": "REPAY",
                    "productName": "USDT",
                    "orderId": 26055,
                }
            ],
            "total": "1",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_collateral_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/collateralRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCollateralRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCollateralRecordResponse.from_dict(expected_response)
        else:
            expected = GetCollateralRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_collateral_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_collateral_record() successfully with optional parameters."""

        params = {
            "product_id": "1",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "amount": "100.00000000",
                    "productId": "BUSD001",
                    "asset": "USDT",
                    "createTime": 1575018510000,
                    "type": "REPAY",
                    "productName": "USDT",
                    "orderId": 26055,
                }
            ],
            "total": "1",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_collateral_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/collateralRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCollateralRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetCollateralRecordResponse.from_dict(expected_response)
        else:
            expected = GetCollateralRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_collateral_record_server_error(self):
        """Test that get_collateral_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_collateral_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_collateral_record()

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_redemption_record_success(self, mock_get_signature):
        """Test get_flexible_redemption_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "amount": "10.54000000",
                    "asset": "USDT",
                    "time": 1577257222000,
                    "projectId": "USDT001",
                    "redeemId": 40607,
                    "destAccount": "SPOT",
                    "status": "PAID",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_redemption_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/redemptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleRedemptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleRedemptionRecordResponse.from_dict(expected_response)
        else:
            expected = GetFlexibleRedemptionRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_redemption_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_flexible_redemption_record() successfully with optional parameters."""

        params = {
            "product_id": "1",
            "redeem_id": "1",
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "amount": "10.54000000",
                    "asset": "USDT",
                    "time": 1577257222000,
                    "projectId": "USDT001",
                    "redeemId": 40607,
                    "destAccount": "SPOT",
                    "status": "PAID",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_redemption_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/redemptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleRedemptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleRedemptionRecordResponse.from_dict(expected_response)
        else:
            expected = GetFlexibleRedemptionRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_flexible_redemption_record_server_error(self):
        """Test that get_flexible_redemption_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_flexible_redemption_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_flexible_redemption_record()

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_rewards_history_success(self, mock_get_signature):
        """Test get_flexible_rewards_history() successfully with required parameters only."""

        params = {
            "type": "Bonus",
        }

        expected_response = {
            "rows": [
                {
                    "asset": "BUSD",
                    "rewards": "0.00006408",
                    "projectId": "USDT001",
                    "type": "BONUS",
                    "time": 1577233578000,
                },
                {
                    "asset": "USDT",
                    "rewards": "0.00687654",
                    "projectId": "USDT001",
                    "type": "REALTIME",
                    "time": 1577233562000,
                },
            ],
            "total": 2,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_rewards_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/rewardsRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["type"] == "Bonus"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleRewardsHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleRewardsHistoryResponse.from_dict(expected_response)
        else:
            expected = GetFlexibleRewardsHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_rewards_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_flexible_rewards_history() successfully with optional parameters."""

        params = {
            "type": "Bonus",
            "product_id": "1",
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "asset": "BUSD",
                    "rewards": "0.00006408",
                    "projectId": "USDT001",
                    "type": "BONUS",
                    "time": 1577233578000,
                },
                {
                    "asset": "USDT",
                    "rewards": "0.00687654",
                    "projectId": "USDT001",
                    "type": "REALTIME",
                    "time": 1577233562000,
                },
            ],
            "total": 2,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_rewards_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/rewardsRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleRewardsHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleRewardsHistoryResponse.from_dict(expected_response)
        else:
            expected = GetFlexibleRewardsHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_flexible_rewards_history_missing_required_param_type(self):
        """Test that get_flexible_rewards_history() raises RequiredError when 'type' is missing."""
        params = {
            "type": "Bonus",
        }
        del params["type"]

        with pytest.raises(RequiredError, match="Missing required parameter 'type'"):
            self.client.get_flexible_rewards_history(**params)

    def test_get_flexible_rewards_history_server_error(self):
        """Test that get_flexible_rewards_history() raises an error when the server returns an error."""

        params = {
            "type": "Bonus",
        }

        mock_error = Exception("ResponseError")
        self.client.get_flexible_rewards_history = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_flexible_rewards_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_subscription_record_success(self, mock_get_signature):
        """Test get_flexible_subscription_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "amount": "100.00000000",
                    "asset": "USDT",
                    "time": 1575018510000,
                    "purchaseId": 26055,
                    "productId": "USDT001",
                    "type": "AUTO",
                    "sourceAccount": "SPOT",
                    "amtFromSpot": "30",
                    "amtFromFunding": "70",
                    "status": "SUCCESS",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_subscription_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/subscriptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleSubscriptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleSubscriptionRecordResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFlexibleSubscriptionRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_subscription_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_flexible_subscription_record() successfully with optional parameters."""

        params = {
            "product_id": "1",
            "purchase_id": "1",
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "amount": "100.00000000",
                    "asset": "USDT",
                    "time": 1575018510000,
                    "purchaseId": 26055,
                    "productId": "USDT001",
                    "type": "AUTO",
                    "sourceAccount": "SPOT",
                    "amtFromSpot": "30",
                    "amtFromFunding": "70",
                    "status": "SUCCESS",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_subscription_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/subscriptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleSubscriptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleSubscriptionRecordResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFlexibleSubscriptionRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_flexible_subscription_record_server_error(self):
        """Test that get_flexible_subscription_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_flexible_subscription_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_flexible_subscription_record()

    @patch("binance_common.utils.get_signature")
    def test_get_locked_redemption_record_success(self, mock_get_signature):
        """Test get_locked_redemption_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "positionId": 123123,
                    "redeemId": 40607,
                    "time": 1575018510000,
                    "asset": "BNB",
                    "lockPeriod": "30",
                    "amount": "21312.23223",
                    "originalAmount": "21312.23223",
                    "type": "MATURE",
                    "deliverDate": "1575018510000",
                    "lossAmount": "0.00001232",
                    "isComplete": True,
                    "rewardAsset": "AXS",
                    "rewardAmt": "5.17181528",
                    "extraRewardAsset": "BNB",
                    "estExtraRewardAmt": "5.17181528",
                    "status": "PAID",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_redemption_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/locked/history/redemptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedRedemptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedRedemptionRecordResponse.from_dict(expected_response)
        else:
            expected = GetLockedRedemptionRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_locked_redemption_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_locked_redemption_record() successfully with optional parameters."""

        params = {
            "position_id": 1,
            "redeem_id": "1",
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "positionId": 123123,
                    "redeemId": 40607,
                    "time": 1575018510000,
                    "asset": "BNB",
                    "lockPeriod": "30",
                    "amount": "21312.23223",
                    "originalAmount": "21312.23223",
                    "type": "MATURE",
                    "deliverDate": "1575018510000",
                    "lossAmount": "0.00001232",
                    "isComplete": True,
                    "rewardAsset": "AXS",
                    "rewardAmt": "5.17181528",
                    "extraRewardAsset": "BNB",
                    "estExtraRewardAmt": "5.17181528",
                    "status": "PAID",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_redemption_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/locked/history/redemptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedRedemptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedRedemptionRecordResponse.from_dict(expected_response)
        else:
            expected = GetLockedRedemptionRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_locked_redemption_record_server_error(self):
        """Test that get_locked_redemption_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_locked_redemption_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_locked_redemption_record()

    @patch("binance_common.utils.get_signature")
    def test_get_locked_rewards_history_success(self, mock_get_signature):
        """Test get_locked_rewards_history() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "positionId": 123123,
                    "time": 1575018510000,
                    "asset": "BNB",
                    "lockPeriod": "30",
                    "amount": "21312.23223",
                    "type": "Locked Rewards",
                },
                {
                    "positionId": 123123,
                    "time": 1575018510000,
                    "asset": "BNB",
                    "amount": "1.23223",
                    "type": "Boost Rewards",
                },
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_rewards_history()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/locked/history/rewardsRecord" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedRewardsHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedRewardsHistoryResponse.from_dict(expected_response)
        else:
            expected = GetLockedRewardsHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_locked_rewards_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_locked_rewards_history() successfully with optional parameters."""

        params = {
            "position_id": 1,
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "positionId": 123123,
                    "time": 1575018510000,
                    "asset": "BNB",
                    "lockPeriod": "30",
                    "amount": "21312.23223",
                    "type": "Locked Rewards",
                },
                {
                    "positionId": 123123,
                    "time": 1575018510000,
                    "asset": "BNB",
                    "amount": "1.23223",
                    "type": "Boost Rewards",
                },
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_rewards_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/locked/history/rewardsRecord" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedRewardsHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedRewardsHistoryResponse.from_dict(expected_response)
        else:
            expected = GetLockedRewardsHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_locked_rewards_history_server_error(self):
        """Test that get_locked_rewards_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_locked_rewards_history = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_locked_rewards_history()

    @patch("binance_common.utils.get_signature")
    def test_get_locked_subscription_record_success(self, mock_get_signature):
        """Test get_locked_subscription_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "positionId": 123123,
                    "purchaseId": "26055",
                    "projectId": "Axs*90",
                    "time": 1575018510000,
                    "asset": "BNB",
                    "amount": "21312.23223",
                    "lockPeriod": "30",
                    "type": "AUTO",
                    "sourceAccount": "SPOT",
                    "amtFromSpot": "30",
                    "amtFromFunding": "70",
                    "status": "SUCCESS",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_subscription_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/locked/history/subscriptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedSubscriptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedSubscriptionRecordResponse.from_dict(expected_response)
        else:
            expected = GetLockedSubscriptionRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_locked_subscription_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_locked_subscription_record() successfully with optional parameters."""

        params = {
            "purchase_id": "1",
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "positionId": 123123,
                    "purchaseId": "26055",
                    "projectId": "Axs*90",
                    "time": 1575018510000,
                    "asset": "BNB",
                    "amount": "21312.23223",
                    "lockPeriod": "30",
                    "type": "AUTO",
                    "sourceAccount": "SPOT",
                    "amtFromSpot": "30",
                    "amtFromFunding": "70",
                    "status": "SUCCESS",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_subscription_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/locked/history/subscriptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedSubscriptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedSubscriptionRecordResponse.from_dict(expected_response)
        else:
            expected = GetLockedSubscriptionRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_locked_subscription_record_server_error(self):
        """Test that get_locked_subscription_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_locked_subscription_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_locked_subscription_record()

    @patch("binance_common.utils.get_signature")
    def test_get_rate_history_success(self, mock_get_signature):
        """Test get_rate_history() successfully with required parameters only."""

        params = {
            "product_id": "1",
        }

        expected_response = {
            "rows": [
                {
                    "productId": "BUSD001",
                    "asset": "BUSD",
                    "annualPercentageRate": "0.00006408",
                    "time": 1577233578000,
                }
            ],
            "total": "1",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_rate_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/rateHistory" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["productId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetRateHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetRateHistoryResponse.from_dict(expected_response)
        else:
            expected = GetRateHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_rate_history_success_with_optional_params(self, mock_get_signature):
        """Test get_rate_history() successfully with optional parameters."""

        params = {
            "product_id": "1",
            "apr_period": "DAY",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "productId": "BUSD001",
                    "asset": "BUSD",
                    "annualPercentageRate": "0.00006408",
                    "time": 1577233578000,
                }
            ],
            "total": "1",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_rate_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/history/rateHistory" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetRateHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetRateHistoryResponse.from_dict(expected_response)
        else:
            expected = GetRateHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_rate_history_missing_required_param_product_id(self):
        """Test that get_rate_history() raises RequiredError when 'product_id' is missing."""
        params = {
            "product_id": "1",
        }
        del params["product_id"]

        with pytest.raises(
            RequiredError, match="Missing required parameter 'product_id'"
        ):
            self.client.get_rate_history(**params)

    def test_get_rate_history_server_error(self):
        """Test that get_rate_history() raises an error when the server returns an error."""

        params = {
            "product_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_rate_history = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_rate_history(**params)
