"""
Binance Simple Earn REST API

OpenAPI Specification for the Binance Simple Earn REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_simple_earn.rest_api.api import AccountApi
from binance_sdk_simple_earn.rest_api.models import GetFlexiblePersonalLeftQuotaResponse
from binance_sdk_simple_earn.rest_api.models import GetFlexibleProductPositionResponse
from binance_sdk_simple_earn.rest_api.models import GetLockedPersonalLeftQuotaResponse
from binance_sdk_simple_earn.rest_api.models import GetLockedProductPositionResponse
from binance_sdk_simple_earn.rest_api.models import (
    GetSimpleEarnFlexibleProductListResponse,
)
from binance_sdk_simple_earn.rest_api.models import (
    GetSimpleEarnLockedProductListResponse,
)
from binance_sdk_simple_earn.rest_api.models import SimpleAccountResponse


class TestAccountApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = AccountApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_personal_left_quota_success(self, mock_get_signature):
        """Test get_flexible_personal_left_quota() successfully with required parameters only."""

        params = {
            "product_id": "1",
        }

        expected_response = {"leftPersonalQuota": "1000"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_personal_left_quota(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/personalLeftQuota" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["productId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexiblePersonalLeftQuotaResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexiblePersonalLeftQuotaResponse.from_dict(expected_response)
        else:
            expected = GetFlexiblePersonalLeftQuotaResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_personal_left_quota_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_flexible_personal_left_quota() successfully with optional parameters."""

        params = {"product_id": "1", "recv_window": 5000}

        expected_response = {"leftPersonalQuota": "1000"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_personal_left_quota(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/simple-earn/flexible/personalLeftQuota" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexiblePersonalLeftQuotaResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexiblePersonalLeftQuotaResponse.from_dict(expected_response)
        else:
            expected = GetFlexiblePersonalLeftQuotaResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_flexible_personal_left_quota_missing_required_param_product_id(self):
        """Test that get_flexible_personal_left_quota() raises RequiredError when 'product_id' is missing."""
        params = {
            "product_id": "1",
        }
        params["product_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'product_id'"
        ):
            self.client.get_flexible_personal_left_quota(**params)

    def test_get_flexible_personal_left_quota_server_error(self):
        """Test that get_flexible_personal_left_quota() raises an error when the server returns an error."""

        params = {
            "product_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_flexible_personal_left_quota = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_flexible_personal_left_quota(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_product_position_success(self, mock_get_signature):
        """Test get_flexible_product_position() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "totalAmount": "75.46000000",
                    "tierAnnualPercentageRate": {"0-5BTC": 0.05, "5-10BTC": 0.03},
                    "latestAnnualPercentageRate": "0.02599895",
                    "yesterdayAirdropPercentageRate": "0.02599895",
                    "asset": "USDT",
                    "airDropAsset": "BETH",
                    "canRedeem": True,
                    "collateralAmount": "232.23123213",
                    "productId": "USDT001",
                    "yesterdayRealTimeRewards": "0.10293829",
                    "cumulativeBonusRewards": "0.22759183",
                    "cumulativeRealTimeRewards": "0.22759183",
                    "cumulativeTotalRewards": "0.45459183",
                    "autoSubscribe": True,
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_product_position()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/position" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleProductPositionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleProductPositionResponse.from_dict(expected_response)
        else:
            expected = GetFlexibleProductPositionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_flexible_product_position_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_flexible_product_position() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "product_id": "1",
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "totalAmount": "75.46000000",
                    "tierAnnualPercentageRate": {"0-5BTC": 0.05, "5-10BTC": 0.03},
                    "latestAnnualPercentageRate": "0.02599895",
                    "yesterdayAirdropPercentageRate": "0.02599895",
                    "asset": "USDT",
                    "airDropAsset": "BETH",
                    "canRedeem": True,
                    "collateralAmount": "232.23123213",
                    "productId": "USDT001",
                    "yesterdayRealTimeRewards": "0.10293829",
                    "cumulativeBonusRewards": "0.22759183",
                    "cumulativeRealTimeRewards": "0.22759183",
                    "cumulativeTotalRewards": "0.45459183",
                    "autoSubscribe": True,
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_flexible_product_position(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/position" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFlexibleProductPositionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetFlexibleProductPositionResponse.from_dict(expected_response)
        else:
            expected = GetFlexibleProductPositionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_flexible_product_position_server_error(self):
        """Test that get_flexible_product_position() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_flexible_product_position = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_flexible_product_position()

    @patch("binance_common.utils.get_signature")
    def test_get_locked_personal_left_quota_success(self, mock_get_signature):
        """Test get_locked_personal_left_quota() successfully with required parameters only."""

        params = {
            "project_id": "1",
        }

        expected_response = {"leftPersonalQuota": "1000"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_personal_left_quota(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/personalLeftQuota" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["projectId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedPersonalLeftQuotaResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedPersonalLeftQuotaResponse.from_dict(expected_response)
        else:
            expected = GetLockedPersonalLeftQuotaResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_locked_personal_left_quota_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_locked_personal_left_quota() successfully with optional parameters."""

        params = {"project_id": "1", "recv_window": 5000}

        expected_response = {"leftPersonalQuota": "1000"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_personal_left_quota(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/personalLeftQuota" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedPersonalLeftQuotaResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedPersonalLeftQuotaResponse.from_dict(expected_response)
        else:
            expected = GetLockedPersonalLeftQuotaResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_locked_personal_left_quota_missing_required_param_project_id(self):
        """Test that get_locked_personal_left_quota() raises RequiredError when 'project_id' is missing."""
        params = {
            "project_id": "1",
        }
        params["project_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'project_id'"
        ):
            self.client.get_locked_personal_left_quota(**params)

    def test_get_locked_personal_left_quota_server_error(self):
        """Test that get_locked_personal_left_quota() raises an error when the server returns an error."""

        params = {
            "project_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_locked_personal_left_quota = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_locked_personal_left_quota(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_locked_product_position_success(self, mock_get_signature):
        """Test get_locked_product_position() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "positionId": 123123,
                    "parentPositionId": 123122,
                    "projectId": "Axs*90",
                    "asset": "AXS",
                    "amount": "122.09202928",
                    "purchaseTime": "1646182276000",
                    "duration": "60",
                    "accrualDays": "4",
                    "rewardAsset": "AXS",
                    "APY": "0.2032",
                    "rewardAmt": "5.17181528",
                    "extraRewardAsset": "BNB",
                    "extraRewardAPR": "0.0203",
                    "estExtraRewardAmt": "5.17181528",
                    "boostRewardAsset": "AXS",
                    "boostApr": "0.0121",
                    "totalBoostRewardAmt": "3.98201829",
                    "nextPay": "1.29295383",
                    "nextPayDate": "1646697600000",
                    "payPeriod": "1",
                    "redeemAmountEarly": "2802.24068892",
                    "rewardsEndDate": "1651449600000",
                    "deliverDate": "1651536000000",
                    "redeemPeriod": "1",
                    "redeemingAmt": "232.2323",
                    "redeemTo": "FLEXIBLE",
                    "partialAmtDeliverDate": "1651536000000",
                    "canRedeemEarly": True,
                    "canFastRedemption": True,
                    "autoSubscribe": True,
                    "type": "AUTO",
                    "status": "HOLDING",
                    "canReStake": True,
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_product_position()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/position" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedProductPositionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedProductPositionResponse.from_dict(expected_response)
        else:
            expected = GetLockedProductPositionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_locked_product_position_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_locked_product_position() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "position_id": 1,
            "project_id": "1",
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "positionId": 123123,
                    "parentPositionId": 123122,
                    "projectId": "Axs*90",
                    "asset": "AXS",
                    "amount": "122.09202928",
                    "purchaseTime": "1646182276000",
                    "duration": "60",
                    "accrualDays": "4",
                    "rewardAsset": "AXS",
                    "APY": "0.2032",
                    "rewardAmt": "5.17181528",
                    "extraRewardAsset": "BNB",
                    "extraRewardAPR": "0.0203",
                    "estExtraRewardAmt": "5.17181528",
                    "boostRewardAsset": "AXS",
                    "boostApr": "0.0121",
                    "totalBoostRewardAmt": "3.98201829",
                    "nextPay": "1.29295383",
                    "nextPayDate": "1646697600000",
                    "payPeriod": "1",
                    "redeemAmountEarly": "2802.24068892",
                    "rewardsEndDate": "1651449600000",
                    "deliverDate": "1651536000000",
                    "redeemPeriod": "1",
                    "redeemingAmt": "232.2323",
                    "redeemTo": "FLEXIBLE",
                    "partialAmtDeliverDate": "1651536000000",
                    "canRedeemEarly": True,
                    "canFastRedemption": True,
                    "autoSubscribe": True,
                    "type": "AUTO",
                    "status": "HOLDING",
                    "canReStake": True,
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_locked_product_position(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/position" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetLockedProductPositionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetLockedProductPositionResponse.from_dict(expected_response)
        else:
            expected = GetLockedProductPositionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_locked_product_position_server_error(self):
        """Test that get_locked_product_position() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_locked_product_position = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_locked_product_position()

    @patch("binance_common.utils.get_signature")
    def test_get_simple_earn_flexible_product_list_success(self, mock_get_signature):
        """Test get_simple_earn_flexible_product_list() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "asset": "BTC",
                    "latestAnnualPercentageRate": "0.05000000",
                    "tierAnnualPercentageRate": {"0-5BTC": 0.05, "5-10BTC": 0.03},
                    "airDropPercentageRate": "0.05000000",
                    "canPurchase": True,
                    "canRedeem": True,
                    "isSoldOut": True,
                    "hot": True,
                    "minPurchaseAmount": "0.01000000",
                    "productId": "BTC001",
                    "subscriptionStartTime": 1646182276000,
                    "status": "PURCHASING",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_simple_earn_flexible_product_list()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetSimpleEarnFlexibleProductListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetSimpleEarnFlexibleProductListResponse.from_dict(
                expected_response
            )
        else:
            expected = GetSimpleEarnFlexibleProductListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_simple_earn_flexible_product_list_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_simple_earn_flexible_product_list() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "asset": "BTC",
                    "latestAnnualPercentageRate": "0.05000000",
                    "tierAnnualPercentageRate": {"0-5BTC": 0.05, "5-10BTC": 0.03},
                    "airDropPercentageRate": "0.05000000",
                    "canPurchase": True,
                    "canRedeem": True,
                    "isSoldOut": True,
                    "hot": True,
                    "minPurchaseAmount": "0.01000000",
                    "productId": "BTC001",
                    "subscriptionStartTime": 1646182276000,
                    "status": "PURCHASING",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_simple_earn_flexible_product_list(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/flexible/list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetSimpleEarnFlexibleProductListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetSimpleEarnFlexibleProductListResponse.from_dict(
                expected_response
            )
        else:
            expected = GetSimpleEarnFlexibleProductListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_simple_earn_flexible_product_list_server_error(self):
        """Test that get_simple_earn_flexible_product_list() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_simple_earn_flexible_product_list = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_simple_earn_flexible_product_list()

    @patch("binance_common.utils.get_signature")
    def test_get_simple_earn_locked_product_list_success(self, mock_get_signature):
        """Test get_simple_earn_locked_product_list() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "projectId": "Axs*90",
                    "detail": {
                        "asset": "AXS",
                        "rewardAsset": "AXS",
                        "duration": 90,
                        "renewable": True,
                        "isSoldOut": True,
                        "apr": "1.2069",
                        "status": "CREATED",
                        "subscriptionStartTime": 1646182276000,
                        "extraRewardAsset": "BNB",
                        "extraRewardAPR": "0.23",
                        "boostRewardAsset": "AXS",
                        "boostApr": "0.0121",
                        "boostEndTime": "1646182276000",
                    },
                    "quota": {"totalPersonalQuota": "2", "minimum": "0.001"},
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_simple_earn_locked_product_list()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetSimpleEarnLockedProductListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetSimpleEarnLockedProductListResponse.from_dict(
                expected_response
            )
        else:
            expected = GetSimpleEarnLockedProductListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_simple_earn_locked_product_list_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_simple_earn_locked_product_list() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "projectId": "Axs*90",
                    "detail": {
                        "asset": "AXS",
                        "rewardAsset": "AXS",
                        "duration": 90,
                        "renewable": True,
                        "isSoldOut": True,
                        "apr": "1.2069",
                        "status": "CREATED",
                        "subscriptionStartTime": 1646182276000,
                        "extraRewardAsset": "BNB",
                        "extraRewardAPR": "0.23",
                        "boostRewardAsset": "AXS",
                        "boostApr": "0.0121",
                        "boostEndTime": "1646182276000",
                    },
                    "quota": {"totalPersonalQuota": "2", "minimum": "0.001"},
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_simple_earn_locked_product_list(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/locked/list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetSimpleEarnLockedProductListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = GetSimpleEarnLockedProductListResponse.from_dict(
                expected_response
            )
        else:
            expected = GetSimpleEarnLockedProductListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_simple_earn_locked_product_list_server_error(self):
        """Test that get_simple_earn_locked_product_list() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_simple_earn_locked_product_list = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_simple_earn_locked_product_list()

    @patch("binance_common.utils.get_signature")
    def test_simple_account_success(self, mock_get_signature):
        """Test simple_account() successfully with required parameters only."""

        expected_response = {
            "totalAmountInBTC": "0.01067982",
            "totalAmountInUSDT": "77.13289230",
            "totalFlexibleAmountInBTC": "0.00000000",
            "totalFlexibleAmountInUSDT": "0.00000000",
            "totalLockedInBTC": "0.01067982",
            "totalLockedInUSDT": "77.13289230",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.simple_account()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SimpleAccountResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SimpleAccountResponse.from_dict(expected_response)
        else:
            expected = SimpleAccountResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_simple_account_success_with_optional_params(self, mock_get_signature):
        """Test simple_account() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "totalAmountInBTC": "0.01067982",
            "totalAmountInUSDT": "77.13289230",
            "totalFlexibleAmountInBTC": "0.00000000",
            "totalFlexibleAmountInUSDT": "0.00000000",
            "totalLockedInBTC": "0.01067982",
            "totalLockedInUSDT": "77.13289230",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.simple_account(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/simple-earn/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SimpleAccountResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list:
            expected = SimpleAccountResponse.from_dict(expected_response)
        else:
            expected = SimpleAccountResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_simple_account_server_error(self):
        """Test that simple_account() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.simple_account = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.simple_account()
